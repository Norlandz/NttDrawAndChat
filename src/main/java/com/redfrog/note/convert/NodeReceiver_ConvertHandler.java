package com.redfrog.note.convert;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.time.Instant;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.apache.commons.lang3.tuple.Triple;
import org.springframework.util.SerializationUtils;

import com.redfrog.note.DrawAndChatVm;
import com.redfrog.note.event.ArrowMovedEvent;
import com.redfrog.note.event.ArrowMovedEvent.ArrowDir;
import com.redfrog.note.event.FunctionExecutionEvent;
import com.redfrog.note.event.NodeCreatedEvent;
import com.redfrog.note.event.NodeLayerMovedEvent;
import com.redfrog.note.event.NodeMovedEvent;
import com.redfrog.note.event.NodeRelationshipContainmentStatusChangedEvent;
import com.redfrog.note.event.NodeRemovedEvent;
import com.redfrog.note.event.NodeShapeScaleChangedEvent;
import com.redfrog.note.event.NodeShapeSizeChangedEvent;
import com.redfrog.note.event.PaintDotChangedEvent;
import com.redfrog.note.event.PaintRectClearEvent;
import com.redfrog.note.event.TextChangedEvent;
import com.redfrog.note.event.mousekeyboardinput.StatusPhase;
import com.redfrog.note.event.nodestatus.NodeFocusStatusChangedEvent;
import com.redfrog.note.event.session.SessionBeignEvent;
import com.redfrog.note.event.traversal.RedoCompensationStepAddedEvent;
import com.redfrog.note.event.traversal.RedoEvent;
import com.redfrog.note.event.traversal.UndoCheckpointPlacedEvent;
import com.redfrog.note.event.traversal.UndoCompensationStepAddedEvent;
import com.redfrog.note.event.traversal.UndoEvent;
import com.redfrog.note.exception.NotSupportedException;
import com.redfrog.note.exception.TypeError;
import com.redfrog.note.fundamental.NodeEvent;
import com.redfrog.note.fundamental.NodeSig;
import com.redfrog.note.fundamental.NodeSigManager;
import com.redfrog.note.nodeRole.ButtonSig;
import com.redfrog.note.nodeRole.CanvasSig;
import com.redfrog.note.nodeRole.TextAreaSig;
import com.redfrog.note.nodeShape.Arrow;
import com.redfrog.note.nodeShape.Point;
import com.redfrog.note.nodeShape.Shape;
import com.redfrog.note.serialization.SerializableMethod;
import com.redfrog.note.session.WindowSession;
import com.redfrog.note.session.WindowSessionExecutor;
import com.redfrog.note.traversal.UndoManager;
import com.redfrog.note.util.JavafxUtil;
import com.redfrog.note.util.JavafxUtil.MoveLayerMode;

import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.TextArea;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Region;

public class NodeReceiver_ConvertHandler implements WindowSessionExecutor {

  private final WindowSession windowSession_corr;
  private final NodeSigManager nodeSigManager_corr;
  private final NodeCreatorAndConvertor nodeCreatorAndConvertor;
  private final UndoManager undoManager_corr;
  //_________________________________________________________________________________________

  public NodeReceiver_ConvertHandler(WindowSession windowSession_corr) {
    this.windowSession_corr      = windowSession_corr;
    this.nodeSigManager_corr     = windowSession_corr.nodeSigManager;
    this.nodeCreatorAndConvertor = new NodeCreatorAndConvertor(windowSession_corr);
    this.undoManager_corr        = windowSession_corr.undoManager;
    //_____________________________________________________________________________________________________________________
  }

  @Override
  public WindowSession getWindowSession() { return windowSession_corr; }

  //_______________________




  public void listen_NodeCreatedEvent(NodeCreatedEvent event) {
    NodeSig nodeMain = event.nodeMain;
    //_____________________________________________________________________________
    nodeCreatorAndConvertor.nodeSig2jfxNode_adjust(nodeMain);

    System.out.println(String.format("Received %s :: %s", Instant.now(), event));
    //__________________________
    //_______________________________
    //______________________________________________________________________________________________________________________________________________________________________________________
    //____________________________________________________________________________________________________________________
    //_________________________________________________________________________________________________________________
    //_____________________________________________________________________________________________________________________________________________________________________________________________________________
    //__________________________
  }

  public void listen_NodeMovedEvent(NodeMovedEvent event) {
    NodeSig nodeMain_deserialized = event.nodeMain;

    Shape shape = nodeMain_deserialized.shape;
    Point point = shape.get_pt_TopLeftFront();

    //______________________________________________________
    NodeSig nodeSig = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeMain_deserialized);
    Node node = nodeSig.fxNode_AssocConvert;

    node.setLayoutX(point.getX());
    node.setLayoutY(point.getY());

    System.out.println(String.format("Received %s :: %s", Instant.now(), event));
    //__________________________
    //_______________________________
    //__________________________________________________
    //________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //____________________________
    //__________________________________________________________________________
    //_____________________
    //_________________________________________________________________________________________________
    //__________________________

  }

  public void listen_NodeShapeSizeChangedEvent(NodeShapeSizeChangedEvent event) {

    NodeSig nodeMain_deserialized = event.nodeMain;
    Shape shape = nodeMain_deserialized.shape;

    //______________________________________________________
    //____________________________________________________________________________________________________________________
    //_____________________________________________________________________________________
    NodeSig nodeMain_reside = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeMain_deserialized);

    Class<? extends NodeSig> clazz = nodeMain_reside.getClass();
    if (CanvasSig.class.isAssignableFrom(clazz)) {
      Canvas canvas = (Canvas) nodeMain_reside.fxNode_AssocConvert;
      canvas.setWidth(shape.getGrandXLength());
      canvas.setHeight(shape.getGrandYLength());
    }
    else {
      Region region = (Region) nodeMain_reside.fxNode_AssocConvert;
      region.setPrefSize(shape.getGrandXLength(), shape.getGrandYLength());
    }
    //__________
    //________________________________________
    //_____

    System.out.println(String.format("Received %s :: %s", Instant.now(), event));
    //__________________________
    //_______________________________
    //__________________________________________________
    //________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //____________________________
    //__________________________________________________________________________
    //_____________________
    //__________________________________________________________________________________________________________________________
    //__________________________

  }

  //____________________________________________
  //_________________________________________________________________________________________________________________________
  //
  //_____________________________________________________
  //_______________________________________________________
  //
  //_________________________________________________________
  //____________________________________________________________________________________________________________________________
  //_________________________________________________________________________________
  //_______________________________________________________________________________________________________________________________
  //______________________________________________________
  //________________________________________________________________________________
  //_____________________________________________________________________________________________________________________________
  //
  //_________________________________________________________________________________________________________________________________________
  //______________________________________________________________________________________
  //_______
  //____________
  //__________________________________________
  //_______
  //_____
  //__________
  //_____________________________________________________________________________________________________________________________
  //_____________________________________________________________________________________________________________________________
  //___________________________________________________________
  //____________________________________________________
  //_________________________________________
  //_____
  //
  //_________________________________________________________________________________
  //
  //___

  public void listen_NodeRelationshipContainmentStatusChangedEvent(NodeRelationshipContainmentStatusChangedEvent event) {
    System.out.println(String.format("Received %s :: %s", Instant.now(), event));

    NodeSig nodeSig_AA_deserialized = event.nodeSig_AA;
    NodeSig nodeSig_BB_deserialized = event.nodeMain;
    //______________________________________________________
    if (nodeSig_AA_deserialized.det_IsJavafxRoot == true) {
      //_______________________________________________________________________
      //_________________________________________________________________________
      //________________
      //____________________________________________________________________________________________________________________________________________
      //___________________________________________________________________________
      //_________________________________________________________________________________________________________________________________________________________

      Pane pane_AA = windowSession_corr.pane_JavafxRoot;

      NodeSig nodeSig_BB = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeSig_BB_deserialized);
      Pane node_BB = (Pane) nodeSig_BB.fxNode_AssocConvert;
      windowSession_corr.panel_SemanticRoot = node_BB;
      //_________________________________________________________________________________________________________________________________________________________________________

      pane_AA.getChildren().add(node_BB);
    }
    else {
      NodeSig nodeSig_AA = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeSig_AA_deserialized);
      NodeSig nodeSig_BB = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeSig_BB_deserialized);
      Pane pane_AA = (Pane) nodeSig_AA.fxNode_AssocConvert;
      Node node_BB = nodeSig_BB.fxNode_AssocConvert;
      pane_AA.getChildren().add(node_BB);
    }
    //__________________________
    //_______________________________
    //__________________________________________________________________________________
    //_________________________________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //________________________________________________
    //____________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //______________________________
    //___________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //______________________________
    //__________________________________________________________________________________
    //________________________________________________
    //____________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //______________________________
    //___________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //______________________________
    //___________________________________________________________________________
    //_____________________
    //_____________________________________________________________________________________________________________________
    //____________________________
    //__________________________

  }

  public void listen_TextChangedEvent(TextChangedEvent event) {

    NodeSig nodeMain_deserialized = event.nodeMain;
    String content_old = event.content_old;
    String content_new = event.content_new;

    //______________________________________________________
    NodeSig nodeMain_reside = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeMain_deserialized);

    Class<? extends NodeSig> clazz = nodeMain_reside.getClass();

    if (TextAreaSig.class.isAssignableFrom(clazz)) {
      TextAreaSig textAreaSig = (TextAreaSig) nodeMain_reside;
      textAreaSig.setContent(content_new);

      TextArea textArea = (TextArea) textAreaSig.fxNode_AssocConvert;
      //___________________________________________________________________________
      AtomicInteger cdet_DontSendText = windowSession_corr.drawAndChatVm.mpp_textArea_vs_cdet_DontSendText.get(textArea);
      cdet_DontSendText.incrementAndGet();
      textArea.setText(content_new);
    }
    else if (ButtonSig.class.isAssignableFrom(clazz)) {
      ButtonSig buttonSig = (ButtonSig) nodeMain_reside;

      throw new NotSupportedException();
    }
    else {
      throw new NotSupportedException();
    }
    //__________________________
    //_______________________________
    //__________________________________________________
    //________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //____________________________
    //__________________________________________________________________________
    //_____________________
    //_________________________________________________________________________________________________
    //__________________________

  }

  public void listen_PaintDotChangedEvent(PaintDotChangedEvent event) {

    NodeSig nodeMain_deserialized = event.nodeMain;
    //______________________________________________________________________
    //______________________________________________________________________________________________
    List<Point> arr_BatchLinePoints = event.arr_BatchLinePoints;

    CanvasSig nodeMain_reside = (CanvasSig) nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeMain_deserialized);
    Canvas canvas = (Canvas) nodeMain_reside.fxNode_AssocConvert;

    if (arr_BatchLinePoints == null) {
      Point pt_PaintDot = event.pt_PaintDot;
      boolean det_AddedorRemoved = event.det_AddedorRemoved;
      StatusPhase statusPhase = event.statusPhase;

      double posX = pt_PaintDot.getX();
      double posY = pt_PaintDot.getY();

      //______________________________________________________
      if (det_AddedorRemoved == true) {
        nodeMain_reside.get_gp_PaintDots().add(pt_PaintDot);

        final GraphicsContext graphicsContext = canvas.getGraphicsContext2D();
        if (statusPhase == StatusPhase.Begin_begin) {
          graphicsContext.beginPath();
          graphicsContext.moveTo(posX, posY);
          graphicsContext.stroke();
        }
        else if (statusPhase == StatusPhase.Ongoing_begin) {
          graphicsContext.lineTo(posX, posY);
          graphicsContext.stroke();
          graphicsContext.closePath();
          graphicsContext.beginPath();
          graphicsContext.moveTo(posX, posY);
        }
        else if (statusPhase == StatusPhase.End_begin) {
          graphicsContext.lineTo(posX, posY);
          graphicsContext.stroke();
          graphicsContext.closePath();
        }
        else {
          throw new TypeError();
        }
      }
      else {
        throw new NotSupportedException();
      }
      //__________________________
      //_______________________________
      //__________________________________________________
      //________________________________________________________________________________________
      //______________________________________________________________________________________________________________________________________________
      //____________________________
      //_________________________________
      //___________________________________________________________________________________________________________________________________________________________________
      //____________________________
      //__________________________________________________________________________
      //_____________________
      //___________________________________________________________________________________________________________________________
      //__________________________
    }
    //_______
    else {
      //___
      //______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
      //___
      //___________
      //___________________________________________________________________________
      //
      //___________________________________________________
      //___________________________________________________________________________________
      //______________________________________________________________
      //_
      System.out.println("arr_BatchLinePoints :: " + arr_BatchLinePoints);

      final GraphicsContext graphicsContext = canvas.getGraphicsContext2D();

      int i = -1;
      int length = arr_BatchLinePoints.size();
      for (Point point_curr : arr_BatchLinePoints) {
        i++;
        double posX = point_curr.getX();
        double posY = point_curr.getY();

        if (i == 0) {
          graphicsContext.beginPath();
          graphicsContext.moveTo(posX, posY);
        }
        else if (i != length - 1) {
          graphicsContext.lineTo(posX, posY);
        }
        else {
          graphicsContext.lineTo(posX, posY);
          graphicsContext.stroke();
          graphicsContext.closePath();
        }
      }

    }
  }

  //__________________________________
  public void listen_NodeRemovedEvent(NodeRemovedEvent event) {

    NodeSig nodeMain_deserialized = event.nodeMain;
    //______________________________________________________
    NodeSig nodeMain_reside = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeMain_deserialized);
    //____________________________________

    Node node = nodeMain_reside.fxNode_AssocConvert;

    Parent node_parnet = node.getParent();
    Class<? extends Parent> clazz = node_parnet.getClass();

    if (Pane.class.isAssignableFrom(clazz)) {
      ((Pane) node_parnet).getChildren().remove(node); //_
    }
    else {
      throw new NotSupportedException("Idk ... dk parent/child org in javafx :: " + clazz.toGenericString());
    }
    //__________________________
    //_______________________________
    //__________________________________________________
    //________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //____________________________
    //__________________________________________________________________________
    //_____________________
    //_______________________________________________________________________
    //__________________________

  }

  public void listen_NodeFocusStatusChangedEvent(NodeFocusStatusChangedEvent event) {

    NodeSig nodeMain_deserialized = event.nodeMain;
    //______________________________________________________
    NodeSig nodeMain_reside = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeMain_deserialized);
    Node node = nodeMain_reside.fxNode_AssocConvert;

    boolean focusStatus_curr = event.focusStatus_curr;
    if (focusStatus_curr) {
      nodeMain_reside.set_det_Focused(true);
      NodeSig node_focus_prev = nodeSigManager_corr.node_Focused;
      if (node_focus_prev != null && node_focus_prev != nodeMain_reside) {
        node_focus_prev.set_det_Focused(false); //
      }
      nodeSigManager_corr.node_Focused = nodeMain_reside;

      if (!node.isFocused()) {
        node.requestFocus();
        //___________________________________________________
        //______________________________________________________________________________________________________________________________________
      }
    }
    else {
      nodeMain_reside.set_det_Focused(false);
      NodeSig node_focus_prev = nodeSigManager_corr.node_Focused;
      if (node_focus_prev != null && node_focus_prev == nodeMain_reside) {
        node_focus_prev.set_det_Focused(false); //
      }

      if (node.isFocused()) {
        //______________________________________________
        //___________________________________________________
        System.out.println("How to lost focus in Javafx? Move to the Outer Ele? Whats the default? --- Whatever .. use Listner for style for now");
      }
    }
    //__________________________
    //_______________________________
    //__________________________________________________
    //________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //____________________________
    //__________________________________________________________________________
    //_____________________
    //________________________________________________________________________
    //__________________________

  }

  //________________
  //____________________________________________________
  //
  //___________________________________________
  //
  //_________________________________________________________________________________________________________
  //
  //___________________________________________________
  //_________________________________________________________________________________________________________________________
  //____________________________________________________
  //
  //_______________________________________________________________________
  //_______________________________________________
  //____________________________________________________________________________________
  //___________________________________________
  //_________________________________________________________________________________
  //
  //____________________________________________________
  //________________________________________________________________________
  //
  //___________________________________
  //___________________________
  //_____________________________________
  //_____
  //__________
  //______________________________
  //__________________________________________________________________________________________
  //___________________________________
  //_____________________________________________________________________________________________________
  //_____________________________________________________________________________________
  //___________
  //_______________________________________________
  //_________
  //______________
  //_____________________________________________________________________________________________________________________
  //_________
  //________________________________________________________________________________________________________________________
  //_______
  //____________
  //__________________________________________________________________________________________________________
  //_________________________________________
  //_______________________________________________
  //___________________________________________________________________________________________________
  //_______________________________________________________________________________________________________________
  //_______
  //_____
  //
  //_________
  //__________________________________________________________________________________________________________________________________
  //____________________________________
  //_________________________________
  //_____________________________________________________
  //_______
  //______________________________________
  //___________________________________________________________________
  //_______
  //______________________________________
  //_________________________________________________________________________________
  //_______
  //______________________________________
  //_______________________________________________________________________________________________
  //_______
  //______________________________________
  //_____________________________________________________________________________________________________________
  //_______
  //______________________________________
  //___________________________________________________________________________________________________________________________
  //_______
  //____________
  //____________________________________________________________________________________________________________________________
  //_______
  //_______________________________________________________________________________________________
  //_________________________
  //_____
  //___
  //
  //_______________________________________________________________________________________________________________________________________________________________________
  //
  //________________________________________________________________________________________________________________________________________________________________________
  //
  //_______________________________________________________________________________________________________________________________
  //
  //___________________________________________________
  //_________________________________________________________________________________________________________________________
  //____________________________________________________
  //
  //___________________________________________
  //_____________________________________________________________________________________
  //____________________________________________
  //
  //_______________________________________________________________________
  //____________________________________________________
  //
  //__________________________________________________________________________
  //________________________________________
  //__________________________________________
  //___________
  //________________________________________________________________________________________
  //________________________________________________________________________________________________________________
  //___________________________________
  //____________________________________
  //_________
  //________________________________________
  //___________________________________________________
  //_________
  //________________________________________
  //__________________________________________________________________
  //_________
  //________________________________________
  //_________________________________________________________________________________
  //_________
  //________________________________________
  //________________________________________________________________________________________________
  //_________
  //________________________________________
  //_______________________________________________________________________________________________________________
  //_________
  //______________
  //_______________________________________________________________________________________________________________________________
  //_________
  //_________________________________________________________________________________________________
  //___________________________________
  //_______________________________________
  //___________________________
  //_______
  //______
  //
  //_________________________
  //________________________________________________________________
  //_____
  //__________
  //________________________________________________________________
  //_____
  //
  //___

  public Triple<Method, Object[], Object> convert_and_associate_FunctionExecutionEvent_forInvocation(FunctionExecutionEvent event) {

    SerializableMethod method_serializable = event.method_serializable;
    Method method = method_serializable.getMethod();

    System.out.println(">> mismatch???? " + method.getName());

    Object[] args = (Object[]) SerializationUtils.deserialize(event.args_byte);
    int i = -1;
    for (Object arg_curr : args) {
      i++;
      if (arg_curr != null) {
        Class<? extends Object> clazz_arg = arg_curr.getClass();
        if (NodeSig.class.isAssignableFrom(clazz_arg)) {
          NodeSig nodeSig_deserialized = (NodeSig) arg_curr;
          //______________________________________________________
          NodeSig nodeSig_reside = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeSig_deserialized);
          Node node = nodeSig_reside.fxNode_AssocConvert;
          args[i] = node;
          //______________________________
          //___________________________________
          //______________________________________________________
          //___________________________________________________________________________________________
          //_________________________________________________________________________________________________________________________________________________
          //________________________________
          //_____________________________________
          //______________________________________________________________________________________________________________________________________________________________________
          //________________________________
          //______________________________________________________________________________
          //______________________________________________
          //______________________________
        }
      }
      else {
        System.out.println("Can arg be null? should. //TODO");
      }
      System.out.println(">> Receive args :: " + i + " :: " + args[i] + " :: " + args[i].getClass());
    }

    Class<?> clazz_ins_MethodOwner_sprBean = event.clazz_ins_MethodOwner;

    boolean det_StaticMethod = Modifier.isStatic(method.getModifiers());

    Object ins_MethodOwner;
    if (det_StaticMethod) {
      ins_MethodOwner = null;
    }
    else { //_______________
      if (DrawAndChatVm.class.isAssignableFrom(clazz_ins_MethodOwner_sprBean)) { //___________________
        ins_MethodOwner = windowSession_corr.drawAndChatVm;
      }
      else if (Node.class.isAssignableFrom(clazz_ins_MethodOwner_sprBean)) {
        //____________________________________________________________________________________________________________
        //_____________________________________________
        NodeSig nodeMain_deserialized = event.nodeMain;
        //______________________________________________________
        NodeSig nodeMain_reside = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeMain_deserialized);
        Node node = nodeMain_reside.fxNode_AssocConvert;
        ins_MethodOwner = node;
        //______________________________
        //___________________________________
        //______________________________________________________
        //____________________________________________________________________________________________
        //__________________________________________________________________________________________________________________________________________________
        //________________________________
        //_____________________________________
        //_______________________________________________________________________________________________________________________________________________________________________
        //________________________________
        //______________________________________________________________________________
        //_____________________
        //______________________________________________________
        //______________________________
      }
      else {
        throw new NotSupportedException("Cannot pass instance through network & invoke its method... (Except for maybe DrawAndChatVm / javafx.scene.Node // @messy)");
      }
    }

    System.out.println(">> convert_and_associate_FunctionExecutionEvent_forInvocation :: " + method + " :: " + ins_MethodOwner + " :: " + clazz_ins_MethodOwner_sprBean);

    return new ImmutableTriple<Method, Object[], Object>(method, args, ins_MethodOwner);
  }

  public void listen_FunctionExecutionEvent(FunctionExecutionEvent event) {

    Triple<Method, Object[], Object> tup3 = convert_and_associate_FunctionExecutionEvent_forInvocation(event);

    Method method = tup3.getLeft();
    Object[] args = tup3.getMiddle();
    Object ins_MethodOwner = tup3.getRight();

    int argsLength = args.length;

    try {
      if (argsLength == 0) {
        method.invoke(ins_MethodOwner);
      }
      else if (argsLength == 1) {
        method.invoke(ins_MethodOwner, args[0]);
      }
      else if (argsLength == 2) {
        method.invoke(ins_MethodOwner, args[0], args[1]);
      }
      else if (argsLength == 3) {
        method.invoke(ins_MethodOwner, args[0], args[1], args[2]);
      }
      else if (argsLength == 4) {
        method.invoke(ins_MethodOwner, args[0], args[1], args[2], args[3]);
      }
      else if (argsLength == 5) {
        method.invoke(ins_MethodOwner, args[0], args[1], args[2], args[3], args[4]);
      }
      else {
        throw new NotSupportedException("Too many args, this scribble-draft doesnt support it. :: " + argsLength + " :: " + args);
      }
    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
      System.err.println(method);
      System.err.println(args);
      throw new Error(e);
    }

    //_________________________________________________________________________________________________________________________________
    //_______________________________
    //__________________________________________________________________________
    //_____________________
    //__________________________________________________
    //________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //____________________________
    //__________________________________________________________________________
    //_____________________
    //_________________________________________
    //_________________________________________________________________________________________________________________________________________________________________________________________________
    //__________________________
  }

  public void listen_UndoCompensationStepAddedEvent(UndoCompensationStepAddedEvent event) { listen_UndoOrRedoCompensationStepAddedEvent(event, true); }

  public void listen_RedoCompensationStepAddedEvent(RedoCompensationStepAddedEvent event) { listen_UndoOrRedoCompensationStepAddedEvent(event, false); }

  public void listen_UndoOrRedoCompensationStepAddedEvent(FunctionExecutionEvent event, boolean det_UndoOrRedo) {

    Triple<Method, Object[], Object> tup3 = convert_and_associate_FunctionExecutionEvent_forInvocation(event);

    Method method = tup3.getLeft();
    Object[] args = tup3.getMiddle();
    Object ins_MethodOwner = tup3.getRight();

    int argsLength = args.length;

    //____________________________________________________________________
    //__________________________________
    //______________________________________________________________________________________________________

    Runnable runnable_underlying = () -> {
      try {
        if (argsLength == 0) {
          method.invoke(ins_MethodOwner);
        }
        else if (argsLength == 1) {
          method.invoke(ins_MethodOwner, args[0]);
        }
        else if (argsLength == 2) {
          method.invoke(ins_MethodOwner, args[0], args[1]);
        }
        else if (argsLength == 3) {
          method.invoke(ins_MethodOwner, args[0], args[1], args[2]);
        }
        else if (argsLength == 4) {
          method.invoke(ins_MethodOwner, args[0], args[1], args[2], args[3]);
        }
        else if (argsLength == 5) {
          method.invoke(ins_MethodOwner, args[0], args[1], args[2], args[3], args[4]);
        }
        else {
          throw new NotSupportedException("Too many args, this scribble-draft doesnt support it. :: " + argsLength + " :: " + args);
        }
      } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
        System.err.println(method);
        System.err.println(args);
        throw new Error(e);
      }
    };

    if (det_UndoOrRedo) {
      undoManager_corr.add_UndoCompensationStep(runnable_underlying);
    }
    else {
      undoManager_corr.add_RedoCompensationStep(runnable_underlying);
    }

    //_________________________________________________________________________________________________________________________________
    //_______________________________
    //__________________________________________________________________________
    //_____________________
    //__________________________________________________
    //________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //____________________________
    //__________________________________________________________________________
    //_____________________
    //________________________________________________
    //___________________________________________________________________________________________________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //___________________________________________________________________________________________________________________________________________________________________________________________________________
    //____________________________
    //__________________________
  }

  public void listen_UndoCheckpointPlacedEvent(UndoCheckpointPlacedEvent event) {
    //______________________________________________________
    //_____________________________________________________
    //
    //___________________________________________________
    //_________________________________________________________________________________________________________________________
    //____________________________________________________

    undoManager_corr.place_UndoCheckpoint();
    //__________________________
    //_______________________________
    //____________________________________________________________________________
    //__________________________
  }

  public void listen_UndoEvent(UndoEvent event) {
    //_
    //______________________________________________________
    undoManager_corr.undoTo_LastUndoCheckpoint();
    //__________________________
    //_______________________________
    //_________________________________________________________________________________
    //__________________________
  }

  public void listen_RedoEvent(RedoEvent event) {
    //_
    //______________________________________________________
    undoManager_corr.redoTo_LastUndoCheckpoint();
    //__________________________
    //_______________________________
    //_________________________________________________________________________________
    //__________________________
  }

  public void listen_ArrowMovedEvent(ArrowMovedEvent event) {

    NodeSig nodeMain_deserialized = event.nodeMain;
    Point point = event.point_curr;
    //_____________________________________________
    //_______________________________________________
    ArrowDir det_StartOrEnd = event.arrowDir;

    //______________________________________________________
    NodeSig nodeSig = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeMain_deserialized);
    Arrow node = (Arrow) nodeSig.fxNode_AssocConvert;

    //______________________________________________
    //__________________________________________
    //______________________________________
    //
    //_______________________
    //
    //__________________________________________________
    //___________________________________________________________________________________________
    //___________________________
    //_____________________
    //_________________________________
    //_________________________________
    //_____
    //______________________________
    //____________________________
    //___________________________________
    //___________________________________
    //_____
    //___________________________
    //______________________________
    //___________________________
    //_________________________

    if (det_StartOrEnd == ArrowDir.Start) {
      node.setStartX(point.getX());
      node.setStartY(point.getY());
      System.out.println(">Start :: " + point);
    }
    else if (det_StartOrEnd == ArrowDir.End) {
      node.setEndX(point.getX());
      node.setEndY(point.getY());
      System.out.println(">End   :: " + point);
    }
    else {
      throw new TypeError();
    }
    //__________________________
    //_______________________________
    //__________________________________________________
    //________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //____________________________
    //__________________________________________________________________________
    //_____________________
    //__________________________________________________________________
    //__________________________________________________________________________________________________________________
    //____________________________
    //_____________________________________________________________________
    //___________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //___________________________________________________
    //____________________________
    //__________________________

  }

  public void listen_PaintRectClearEvent(PaintRectClearEvent event) {

    NodeSig nodeMain_deserialized = event.nodeMain;

    //______________________________________________________
    NodeSig nodeSig = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeMain_deserialized);
    Canvas canvas = (Canvas) nodeSig.fxNode_AssocConvert;

    final GraphicsContext graphicsContext = canvas.getGraphicsContext2D();
    graphicsContext.clearRect(event.posX, event.posY, event.posW, event.posH);
    //__________________________
    //_______________________________
    //__________________________________________________
    //________________________________________________________________________________________
    //______________________________________________________________________________________________________________________________________________
    //____________________________
    //_________________________________
    //___________________________________________________________________________________________________________________________________________________________________
    //____________________________
    //__________________________________________________________________________
    //_____________________
    //____________________________________________________________________________________________________________________________________
    //__________________________
  }

  //_______________________________________________________________________________________
  public void listen_NodeLayerMovedEvent(NodeLayerMovedEvent event) {
    NodeSig nodeMain_deserialized = event.nodeMain;
    int ind_Move = event.ind_Move;
    MoveLayerMode moveLayerMode = event.moveLayerMode;

    NodeSig nodeMain_reside = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeMain_deserialized);
    Node node = nodeMain_reside.fxNode_AssocConvert;

    JavafxUtil.move_NodeLayer(node, ind_Move, moveLayerMode);
  }

  public void listen_NodeShapeScaleChangedEvent(NodeShapeScaleChangedEvent event) {
    NodeSig nodeMain_deserialized = event.nodeMain;
    double scaleX_new = event.scaleX_new;
    double scaleY_new = event.scaleY_new;

    NodeSig nodeMain_reside = nodeSigManager_corr.get_LocalNonDeserialized_NodeSig_from_NodeSigManager(nodeMain_deserialized);
    Node node = nodeMain_reside.fxNode_AssocConvert;

    JavafxUtil.scale_NodeShapeScale(node, scaleX_new, scaleY_new);
  }

  //_________________

  public void determine_EventType_and_handle_EventCorrespondingly(NodeEvent event) {
    Class<? extends NodeEvent> clazz = event.getClass();

    if (event != null) {
      if (NodeCreatedEvent.class.isAssignableFrom(clazz)) {
        System.out.printf(">>- %5s %s%n    %s%n", 5, "if (NodeCreatedEvent.class.isAssignableFrom(clazz)) {", event);
        listen_NodeCreatedEvent((NodeCreatedEvent) event);
      }
      else if (NodeMovedEvent.class.isAssignableFrom(clazz)) {
        listen_NodeMovedEvent((NodeMovedEvent) event);
      }
      else if (NodeShapeSizeChangedEvent.class.isAssignableFrom(clazz)) {
        listen_NodeShapeSizeChangedEvent((NodeShapeSizeChangedEvent) event);
      }
      else if (NodeRelationshipContainmentStatusChangedEvent.class.isAssignableFrom(clazz)) {
        listen_NodeRelationshipContainmentStatusChangedEvent((NodeRelationshipContainmentStatusChangedEvent) event);
      }
      else if (TextChangedEvent.class.isAssignableFrom(clazz)) {
        listen_TextChangedEvent((TextChangedEvent) event);
      }
      else if (PaintDotChangedEvent.class.isAssignableFrom(clazz)) {
        listen_PaintDotChangedEvent((PaintDotChangedEvent) event);
      }
      else if (NodeRemovedEvent.class.isAssignableFrom(clazz)) {
        listen_NodeRemovedEvent((NodeRemovedEvent) event);
      }
      else if (NodeFocusStatusChangedEvent.class.isAssignableFrom(clazz)) {
        listen_NodeFocusStatusChangedEvent((NodeFocusStatusChangedEvent) event);
      }
      else if (FunctionExecutionEvent.class.isAssignableFrom(clazz)) {
        if (UndoCompensationStepAddedEvent.class.isAssignableFrom(clazz)) {
          listen_UndoCompensationStepAddedEvent((UndoCompensationStepAddedEvent) event);
        }
        else if (RedoCompensationStepAddedEvent.class.isAssignableFrom(clazz)) {
          listen_RedoCompensationStepAddedEvent((RedoCompensationStepAddedEvent) event);
        }
        else if (FunctionExecutionEvent.class == clazz) { //________________________________________________________________________________________________________________
          listen_FunctionExecutionEvent((FunctionExecutionEvent) event);
        }
        else {
          throw new TypeError(clazz.toGenericString());
        }
      }
      else if (UndoCheckpointPlacedEvent.class.isAssignableFrom(clazz)) {
        listen_UndoCheckpointPlacedEvent((UndoCheckpointPlacedEvent) event);
      }
      else if (UndoEvent.class.isAssignableFrom(clazz)) {
        listen_UndoEvent((UndoEvent) event);
      }
      else if (RedoEvent.class.isAssignableFrom(clazz)) {
        listen_RedoEvent((RedoEvent) event);
      }
      else if (ArrowMovedEvent.class.isAssignableFrom(clazz)) {
        listen_ArrowMovedEvent((ArrowMovedEvent) event);
      }
      else if (PaintRectClearEvent.class.isAssignableFrom(clazz)) {
        listen_PaintRectClearEvent((PaintRectClearEvent) event);
      }
      else if (NodeLayerMovedEvent.class.isAssignableFrom(clazz)) {
        listen_NodeLayerMovedEvent((NodeLayerMovedEvent) event);
      }
      else if (NodeShapeScaleChangedEvent.class.isAssignableFrom(clazz)) {
        listen_NodeShapeScaleChangedEvent((NodeShapeScaleChangedEvent) event);
      }
      else if (SessionBeignEvent.class.isAssignableFrom(clazz)) {
        System.out.println("> SessionBeignEvent :: " + event);
      }
      else if (NodeEvent.class.isAssignableFrom(clazz)) {
        System.out.println("Hibernate thing???? why ? :: " + event + " :: " + event.getClass().toGenericString());
        System.err.println("Hibernate thing???? why ? :: " + event + " :: " + event.getClass().toGenericString());
      }
      else {
        throw new NotSupportedException(event.getClass().toGenericString());
      }
    }
    else {
      System.out.println("Received Null");
    }
  }

}
