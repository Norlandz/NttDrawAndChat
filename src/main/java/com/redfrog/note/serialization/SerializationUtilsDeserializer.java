package com.redfrog.note.serialization;

import org.apache.kafka.common.serialization.Deserializer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.SerializationUtils;

import com.redfrog.note.event.NetworkPosition;
import com.redfrog.note.event.NodeCreatedEvent;
import com.redfrog.note.fundamental.NodeSig;
import com.redfrog.note.session.SessionManager;

public class SerializationUtilsDeserializer implements Deserializer<Object> {

  //____________
  //_______________________________________

  @Override
  public Object deserialize(String topic, byte[] data) {
    try {

      Object obj_deserialized = (Object) SerializationUtils.deserialize(data);

      //_______________________________________________________________________________
      //________________________________________________________________
      //_______________________________
      //_______________________
      //______________________________________________________________________________________________________________________________________________
      //________________________________________________________________________________________________________________________
      //___________________________________________________
      //_____________________________________________________________
      //______________
      //_______________________________________________________
      if (obj_deserialized.getClass().isAssignableFrom(NodeCreatedEvent.class)) {
        NodeCreatedEvent event = (NodeCreatedEvent) obj_deserialized;
        NodeSig nodeMain = event.nodeMain;
        //_______________________________________________________________________________________
        //______________________________________________________________________________________________________________
        nodeMain.networkPosition = NetworkPosition.FromNetwork; //________________________

        System.out.printf(">>- %5s %s%n    %s%n    %s%n", "5.-1", "if (obj_deserialized.getClass().isAssignableFrom(NodeCreatedEvent.class)) {", event, nodeMain);
      }

      return obj_deserialized;
    } catch (IllegalArgumentException e) {
      throw new Error(e);
    }
  }

}

//_______________________________________
//
//___________________________
//
//__________________________________________________________
//___________________________________________________
//
//__________________________________________________________
//___________________________________________________
//________________________________________________
//
//_____________________________________
//
//___________________________________________________________________________
//_____________
//______________________________________________________________
//_________________________
//_____________________________________________________________
//____________________
//_______
//_____________________________________________
//__
//_____________________________
//______________________________________
//__
//____________________________________
//____________________________________________________________________
//____________________
//__
//_____________________
//_____
//__
//___
//
//________________________________________________________________________________
//___________
//___________________________________________________________________
//_________
//______________________________________________________________________
//__________________________________________
//__________________________
//__________________
//_____
//___
//
//_
//
//__________________________________________________________________________________
//_________________________________________________________________
//__
//_____________
//_____________________________________________________________________
//___________
//_________________________________________________________________________________________
//_______________________________
//___________________________
//_______
//_____
//__
//___

//_______________________________________
//
//___________________________________________
//_________________________________________
//
//__________________________________________________________
//
//____________________________
//
//___
//___________________________________________
//___________________________________________________________________
//
//________________________________________________________________________
//___________________________________________________________________________________________
//
//_____________________________________
//
//_________________________________________________________________________________
//
//_
//__
//______________________________________________________________________
//____
//_____________
//_____________________________________________________
//_____________________________________________________________
//_____________________________
//__________________________________________________________________________________________________________________________________
//_________________
//_____
//___
//______________________________________________________________________
//
//___________
//________________________________________________________
//___________________________________________________________
//___________________________
//___________________________________________________
//_______________
//___
//_