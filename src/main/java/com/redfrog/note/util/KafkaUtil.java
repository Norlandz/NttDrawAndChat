package com.redfrog.note.util;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.apache.kafka.clients.admin.Admin;
import org.apache.kafka.clients.admin.CreateTopicsResult;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.KafkaFuture;
import org.apache.kafka.common.errors.WakeupException;

import com.redfrog.note.communication.KafkaConfig;

public class KafkaUtil {

  public static Properties loadConfig(final String configFile) throws IOException {
    if (!Files.exists(Paths.get(configFile))) { throw new IOException(configFile + " not found."); }
    final Properties cfg = new Properties();
    try (InputStream inputStream = new FileInputStream(configFile)) {
      cfg.load(inputStream);
    }
    return cfg;
  }

  public static void create_NewTopic_ifNotExist(String kTopicName, Admin adminClient) {
    System.out.println(">> create_NewTopic_ifNotExist() > listTopics, timeout after 2s ");
    ListTopicsResult listTopics = adminClient.listTopics();
    KafkaFuture<Set<String>> future_names = listTopics.names();
    Set<String> names = null;
    try {
      names = future_names.get(2, TimeUnit.SECONDS);
    } catch (InterruptedException | ExecutionException | TimeoutException e) {
      e.printStackTrace();
    }
    System.out.println(">> create_NewTopic_ifNotExist(), timeout after 60s :: " + kTopicName + " :: " + names);
    if (names == null || !names.contains(kTopicName)) { //________________________________
      NewTopic newTopic = new NewTopic(kTopicName, 1, (short) 1);
      List<NewTopic> newTopics = new ArrayList<NewTopic>();
      newTopics.add(newTopic);
      CreateTopicsResult createTopicsResult = adminClient.createTopics(newTopics);
      KafkaFuture<Void> future_kTopic = createTopicsResult.values().get(kTopicName);
      try {
        future_kTopic.get(60, TimeUnit.SECONDS);
      } catch (InterruptedException | ExecutionException | TimeoutException e) {
        e.printStackTrace();
      }
    }
    System.out.println("<<# create_NewTopic_ifNotExist()");
  }

  //_

  //___________________________________________________________________________________________

  public static void clear_AllMsg_debug(KafkaConfig kafkaConfig) {
    String msg = "The way clear_AllMsg() implemented is very bad -- delete Records in a Kafka topic is possible, "
                 + "\n" + "but doesnt have a good API in Java (-- missing sufficient info to get Access to the Partition & the Offset of the Message).";
    System.out.println(msg);
    System.err.println(msg);

    Consumer<String, ? extends Object> kConsumer_AnyRecord = new KafkaConsumer<>(kafkaConfig.kProp_Consumer);
    kConsumer_AnyRecord.subscribe(Arrays.asList(kafkaConfig.kTopicName_Send_NodeEvent_All, kafkaConfig.kTopicName_Receive_NodeEvent_All));
    while (true) {
      try {
        //___
        //_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
        //___________________________________________________________________________________________________________________________________________________________________________
        //_________________________________________________________________________________________
        ConsumerRecords<String, ? extends Object> consumerRecords = kConsumer_AnyRecord.poll(Duration.ofMillis(1200));
        if (consumerRecords.isEmpty()) {
          System.out.println("Seems all msg drained.");
          kConsumer_AnyRecord.close();
          break;
        }
        for (ConsumerRecord<String, ? extends Object> consumerRecord : consumerRecords) {
          System.out.println("Draining :: " + consumerRecord); //__
        }
      } catch (WakeupException e) {
        System.out.println("Seems we are shutting down :: " + e);
        kConsumer_AnyRecord.close();
      }
    }
  }

}