package com.redfrog.note.database;

import java.util.List;
import java.util.Queue;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;
//_______________________________________
import org.springframework.transaction.annotation.Transactional;

import com.redfrog.note.exception.NotSupportedException;
import com.redfrog.note.fundamental.NodeEvent;
import com.redfrog.note.session.DbOccupation;
import com.redfrog.note.session.DbOccupation.DbName;

/*
______________
____________________________________________
____________

_______
__________
________________________________________

_________________________________________________________________

____________
________________________________________
____
_____
____
_____________________________________________________
____________________________________
___________________
_______
___
*/

//__________
//_____________________________
//
//_________________________
//______________________________
//
//____________
//________________________
//_____________________________
//
//____________
//________________________
//_____________________________
//
//______________________
//_________________________________________________________________________
//_________________________________________________
//_______________
//______________________________________________________________________________
//______________________________________________
//_________________________________________________________
//_________________________________________________
//_________________________________________________________
//____________________________________________________________________
//____________________________
//_________________________________________________
//_____________________
//_________________________________________
//______
//___________________________________________________________________________________________________________________________________
//___________________________________________________________________________________________________________
//_____________________________________
//________________________________________________________________________________________________________________________________________________
//_________________________________
//__________________________________
//________________________________
//___________
//_________
//
//__________________________________________________________________________________________
//_______________________________________________________
//___________________________________________________________________
//_________
//_____________________________________________________________________________________________________________________________________
//_____________________________________________
//_____________________________________________________________________________________________________________
//
//____________________________________________________________
//__________________________
//_______
//_________________________________________________________________
//__________________________
//_______
//____________
//_________________________________________________________________________________________________
//_______
//
//___________________________
//__________________________
//_____
//___
//
//__________________________________________________________________________
//___________________________________________
//_________________________
//
//___
//
//_____________________________________________________________________________
//___________________________________________
//_________________________
//__________________
//___
//
//_

//__________
//_____________________________
//
//_________________________________________________________________
//
//_______
//_____________________________________________________________________________________________________________________________________________
//_______
//______________________________________________________________________________________________________________________________
//___________________
//____________
//______________________________________________
//
//___________________________________________________________________
//_________
//____________________________________________________________
//__________________________________________
//________________________________________________
//_______
//_________________________________________________________________
//________________________________________________
//_______
//____________
//_________________________________________________________________________________________________
//_______
//
//___________________________
//__________________________
//_____
//___
//
//_
//
//_______________________________
//_
//________________________________________
//_
//_______________________________________________________________
//_______________________________________________________________
//_________________________________________________
//_______________________________________________________________
//_________________________________________________________________
//_
//_________________________________________
//_
//___________
//_____________________________________
//___
//_____________
//_________________________
//______________________________
//_
//_____________
//_________________________
//______________________________
//_
//___________________________________
//____________________________________________
//__________________________
//_
//____
//_
//___________________________________
//____________________________________________
//__________________________
//___________________
//____
//_
//__

//__________
//_____________________________
//
//____________
//________________________
//_____________________________
//
//____________
//________________________
//_____________________________
//
//____________
//_____________________________________
//
//___________________________________________________________________
//_________
//_____________________________________________________________________________________________________________________________
//_____________________________________________________________________________________________________
//
//____________________________________________________________
//____________________________________________________________________________________________________________________________________
//________________________________________________________________
//_________________________________
//__________________________________________________________________
//_______
//_________________________________________________________________
//________________________________________________________________
//_______
//____________
//_________________________________________________________________________________________________
//_______
//
//___________________________
//__________________________
//_____
//___
//
//__________________________________
//___________________________________________________________________
//
//__________________________________
//___________________________________________________________________
//
//_

@Component
public class DbThreadHelper {

  @Autowired
  @Qualifier("lcemf_01")
  public EntityManager em_01;

  @Autowired
  @Qualifier("lcemf_02")
  public EntityManager em_02;

  @Autowired
  private ApplicationContext context;

  //____________
  //_____________________________________
  //
  //____________________________________________________________________
  //__________
  //______________________________________________________________________________________________________________________________
  //______________________________________________________________________________________________________
  //_
  //_____________________________________________________________
  //_____________________________________________________________________________________________________________________________________
  //_________________________________________________________________
  //__________________________________
  //___________________________________________________________________
  //________
  //__________________________________________________________________
  //_________________________________________________________________
  //________
  //_____________
  //__________________________________________________________________________________________________
  //________
  //_
  //____________________________
  //___________________________
  //______
  //____

  public long time_LastPersist_db01;

  @Transactional(value = "txm_01")
  public void persist_01(Queue<NodeEvent> queue_nodeEvent) {
    //_______________________________________________________________________________
    int i = 0;
    while (!queue_nodeEvent.isEmpty()) { //________________________________________________________________________________
      i++;
      if (Thread.currentThread().isInterrupted()) {//_______________________________________________________________________________________________________________________
        //___________________________________________
        //___________________________________________________________________
        String msg = "> Interrupted --> break batch persist() loop :: " + Thread.currentThread();
        System.out.println(msg);
        System.err.println(msg);
        break;
      }
      if (i == 150) {
        System.out.println("Too many Event inside a Batch persist, need flush. More ::" + queue_nodeEvent);
        break;
      }
      NodeEvent event = queue_nodeEvent.poll(); //_______________________________
      System.out.println(">> em.persist() :: " + DbOccupation.DbName.db_drawandchat_01 + " :: " + Thread.currentThread().getName() + " :: " + event + " :: " + em_01);
      if (event != null) {
        em_01.persist(event); //_
      }
      time_LastPersist_db01 = System.currentTimeMillis();
    }

    //_____________________________________________________________________________________________________________________________________
    //____________________________
    //____________________________________
    //_____________________________
    //__________________________
    //_________
    //____________________________________
    //_____________________________
    //__________________________
    //_________
    //____________________________________
    //_____________________________
    //__________________________

  }

  //__________________________________________________________________________________________________________________________________
  @Transactional(value = "txm_02")
  public void persist_02(NodeEvent event) {
    System.out.println(">> em.persist() :: " + DbOccupation.DbName.db_drawandchat_02 + " :: " + Thread.currentThread().getName() + " :: " + event + " :: " + em_02);
    em_02.persist(event);
  }

  //_________________________________________
  //__________________________________________________________________________
  //______________________________________________________________________________________________________________________________________________________________________________
  //____________________________________________________________________
  //______________________________________________________
  //_______________________________________________________________________________________________________________________________________________________________________________
  //_____________________________
  //__________
  //_______
  //_________________________________________
  //__________________________________________________________________________
  //____________________________________________________________________
  //______________________________________________________
  //_______________________________________________________________________________________________________________________________________________________________________________
  //_____________________________
  //__________
  //_______
  //__________________
  //_______________________________________________________________________________________________________
  //_________________________________________________________________
  //__________________________________________________________________________________________________
  //_______________________________________________________________________________________
  //____________
  //______________________________________________________________________
  //_______________________________________________________________________________________
  //____________
  //_________________
  //______________________________________________________________________________________________________
  //____________
  //_______
  //__________

  //____________________________________________________________________________________________
  //______________________________________________________________________________________________
  //____________________________________________________________
  public static final String queryStrf_GetAllTableName = "SELECT table_name FROM information_schema.tables   WHERE table_schema = '%s';";
  public static final String queryStrf_RemoveAllRowInATable = "TRUNCATE TABLE %s;";
  public static final String tableName_hibernate_sequence = "hibernate_sequence";

  @Transactional(value = "txm_01")
  public List<String> clear_TabelRows_db01() {
    Query query_GetAllTableName = em_01.createNativeQuery(String.format(queryStrf_GetAllTableName, DbName.db_drawandchat_01));
    List<String> resultList_AllTableName = query_GetAllTableName.getResultList();
    System.out.println(">> clear_TabelRows_db01() :: " + DbOccupation.DbName.db_drawandchat_01 + " :: " + Thread.currentThread().getName() + " :: " + resultList_AllTableName + " :: " + em_01);

    if (resultList_AllTableName.size() > 5) {
      String msg = "Seems deleting a lot of tables es rows? Is this Sql correct? :: numTable=" + resultList_AllTableName.size();
      System.out.println(msg);
      throw new Error(msg);
    }

    for (String tableName : resultList_AllTableName) {
      if (!tableName.equals(tableName_hibernate_sequence)) {
        Query query_RemoveAllRowInATable = em_01.createNativeQuery(String.format(queryStrf_RemoveAllRowInATable, tableName));
        query_RemoveAllRowInATable.executeUpdate();
      }
      else {
        System.out.println("Do nothing with table :: " + tableName_hibernate_sequence);
      }
    }

    return resultList_AllTableName;
  }

  @Transactional(value = "txm_02")
  public List<String> clear_TabelRows_db02() {
    Query query_GetAllTableName = em_02.createNativeQuery(String.format(queryStrf_GetAllTableName, DbName.db_drawandchat_02));
    List<String> resultList_AllTableName = query_GetAllTableName.getResultList();
    System.out.println(">> clear_TabelRows_db02() :: " + DbOccupation.DbName.db_drawandchat_02 + " :: " + Thread.currentThread().getName() + " :: " + resultList_AllTableName + " :: " + em_02);

    if (resultList_AllTableName.size() > 5) {
      String msg = "Seems deleting a lot of tables es rows? Is this Sql correct? :: numTable=" + resultList_AllTableName.size();
      System.out.println(msg);
      throw new Error(msg);
    }

    for (String tableName : resultList_AllTableName) {
      if (!tableName.equals(tableName_hibernate_sequence)) {
        Query query_RemoveAllRowInATable = em_02.createNativeQuery(String.format(queryStrf_RemoveAllRowInATable, tableName));
        query_RemoveAllRowInATable.executeUpdate();
      }
      else {
        System.out.println("Do nothing with table :: " + tableName_hibernate_sequence);
      }
    }

    return resultList_AllTableName;
  }

  //_______
  public List<String> clear_TabelRows(DbName dbName) {
    if (dbName == DbName.db_drawandchat_01) {
      return context.getBean(DbThreadHelper.class).clear_TabelRows_db01();
    }
    else if (dbName == DbName.db_drawandchat_02) {
      return context.getBean(DbThreadHelper.class).clear_TabelRows_db02();
    }
    else if (dbName == DbName.NA) {
      System.out.println(">> clear_TabelRows() -- nothing done cuz NA is picked :: " + dbName);
      return null;
    }
    else {
      throw new NotSupportedException("only 2 db for save & load file is supported currently");
    }

  }

}